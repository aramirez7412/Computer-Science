
#ifndef CYLINDERCLASS_H_
#define CYLINDERCLASS_H_
#include "CircleType.h"

#define pi 3.1416

class CylinderType : public CircleType
{

private:
	double height;

public:
	/***************************************************************************
	 * CylinderType (Constructor)
	 * -------------------------------------------------------------------------
	 * This constructor will
	 ***************************************************************************/
	CylinderType();
	~CylinderType();

	void SetHeight(double newHeight);
	void SetRadius(double newRadius);
	void PromptUserForRadius(double newRadius);
	void PromptUserForHeight(double newHeight);


	//A C C E S S O R S
	double Volume() const;
	double SurfaceArea() const;
};


#endif /* CYLINDERCLASS_H_ */

CylinderType::CylinderType()
{
	height = 0;
	CircleType::SetRadius(0);
}
/*******************************************************************************
 * SetHeight
 * -----------------------------------------------------------------------------
 * This method will set the -height member
 *
 * POST-CONDITION newHeight will be assigned to height
 ******************************************************************************/
void CylinderType::SetHeight(double newHeight)
{
	height = newHeight;
}

double CylinderType::SurfaceArea() const
{
	double radius;

	CircleType::GetRadius();
	return (2*pi*radius*radius) + (2*pi*radius*height);
}
/*******************************************************************************
 * SetRadius
 * -----------------------------------------------------------------------------
 * This method will set the -radius
 *
 * POST-CONDITION radius will be assigned to
 ******************************************************************************/
void CylinderType::SetRadius(double newRadius)
{
	CircleType::SetRadius(newRadius);

}
double CylinderType::Volume() const
{
	double radius = CircleType::GetRadius();

	return 3.1416*radius*radius*height;
}
